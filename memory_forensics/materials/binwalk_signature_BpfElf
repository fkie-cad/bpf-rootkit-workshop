#------------------------------------------------------------------------------
# elf:  file(1) magic for ELF executables
#
# We have to check the byte order flag to see what byte order all the
# other stuff in the header is in.
#
# What're the correct byte orders for the nCUBE and the Fujitsu VPP500?
#
# updated by Daniel Quinlan (quinlan@yggdrasil.com)
0           string                  \177ELF         ELF,
>4          byte                    0               {invalid}
>4          byte                    1               32-bit
# only for MIPS - in the future, the ABI field of e_flags should be used.
>>>36       lelong                  &0x20           N32
>>>36       lelong                  &0x20           N32
>>>36       belong                  &0x20           N32
>>>36       belong                  &0x20           N32
>4          byte                    2               64-bit
>4          byte                    >2
>>4         byte                    x               unknown ELF class: 0x%X
>5          byte                    !1
>>5         byte                    !2              {invalid}
>5          byte                    1               LSB
# The official e_machine number for MIPS is now #8, regardless of endianness.
# The second number (#10) will be deprecated later. For now, we still
# say something if #10 is encountered, but only gory details for #8.
# only for 32-bit
>>>4        byte                    1
>>>>36      lelong&0xf0000000       0x00000000      MIPS-I
>>>>36      lelong&0xf0000000       0x10000000      MIPS-II
>>>>36      lelong&0xf0000000       0x20000000      MIPS-III
>>>>36      lelong&0xf0000000       0x30000000      MIPS-IV
>>>>36      lelong&0xf0000000       0x40000000      MIPS-V
>>>>36      lelong&0xf0000000       0x60000000      MIPS32
>>>>36      lelong&0xf0000000       0x70000000      MIPS64
>>>>36      ulelong&0xf0000000      0x80000000      MIPS32 rel2
>>>>36      ulelong&0xf0000000      0x90000000      MIPS64 rel2
# only for 64-bit
>>>4        byte                    2
>>>>48      lelong&0xf0000000       0x00000000      MIPS-I
>>>>48      lelong&0xf0000000       0x10000000      MIPS-II
>>>>48      lelong&0xf0000000       0x20000000      MIPS-III
>>>>48      lelong&0xf0000000       0x30000000      MIPS-IV
>>>>48      lelong&0xf0000000       0x40000000      MIPS-V
>>>>48      lelong&0xf0000000       0x60000000      MIPS32
>>>>48      lelong&0xf0000000       0x70000000      MIPS64 
>>>>48      ulelong&0xf0000000      0x80000000      MIPS32 rel2
>>>>48      ulelong&0xf0000000      0x90000000      MIPS64 rel2
>>16        leshort                 0               no file type,
>>16        leshort                 1               relocatable,
>>16        leshort                 2               executable,
>>16        leshort                 3               shared object,
# Core handling from Peter Tobias <tobias@server.et-inf.fho-emden.de>
# corrections by Christian 'Dr. Disk' Hechelmann <drdisk@ds9.au.s.shuttle.de>
>>16        leshort                 4               core file
>>16        uleshort                &0xff00         processor-specific,
>>>36       lelong                  &0x01000000     68000 - wrong byte order,{invalid}
>>>36       lelong                  &0x00810000     CPU32 - wrong byte order,{invalid}
>>>36       lelong                  0               68020 - wrong byte order,{invalid}
>>>50       leshort                 0x0214          2.0
>>>48       leshort                 &0x0008         (LP64),
>>18        leshort                 247             Linux BPF,
>>18        leshort                 !247            {invalid},
>>20        lelong                  0               {invalid} invalid version
>>20        lelong                  1               version 1
>>36        lelong                  1               MathCoPro/FPU/MAU Required
>5          byte                    2               MSB
# only for MIPS - see comment in little-endian section above.
# only for 32-bit
>>>4        byte                    1
>>>>36      belong&0xf0000000       0x00000000      MIPS-I
>>>>36      belong&0xf0000000       0x10000000      MIPS-II
>>>>36      belong&0xf0000000       0x20000000      MIPS-III
>>>>36      belong&0xf0000000       0x30000000      MIPS-IV
>>>>36      belong&0xf0000000       0x40000000      MIPS-V
>>>>36      belong&0xf0000000       0x60000000      MIPS32
>>>>36      belong&0xf0000000       0x70000000      MIPS64
>>>>36      ubelong&0xf0000000      0x80000000      MIPS32 rel2
>>>>36      ubelong&0xf0000000      0x90000000      MIPS64 rel2
# only for 64-bit
>>>4        byte                    2
>>>>48      belong&0xf0000000       0x00000000      MIPS-I
>>>>48      belong&0xf0000000       0x10000000      MIPS-II
>>>>48      belong&0xf0000000       0x20000000      MIPS-III
>>>>48      belong&0xf0000000       0x30000000      MIPS-IV
>>>>48      belong&0xf0000000       0x40000000      MIPS-V
>>>>48      belong&0xf0000000       0x60000000      MIPS32
>>>>48      belong&0xf0000000       0x70000000      MIPS64 
>>>>48      ubelong&0xf0000000      0x80000000      MIPS32 rel2
>>>>48      ubelong&0xf0000000      0x90000000      MIPS64 rel2
>>16        beshort                 0               no file type,
>>16        beshort                 1               relocatable,
>>16        beshort                 2               executable,
>>16        beshort                 3               shared object,
>>16        beshort                 4               core file,
#>>>(0x38+0xcc) string    >\0        of '%s'
#>>>(0x38+0x10) belong    >0        (signal %d),
>>16        ubeshort                &0xff00         processor-specific,
>>>36       belong                  &0x01000000     68000,
>>>36       belong                  &0x00810000     CPU32,
>>>36       belong                  0               68020,
>>18        beshort                 247             Linux BPF,
>>18        beshort                 !247            {invalid},
>>>50       beshort                 0x0214          2.0
>>>48       beshort                 &0x0008         (LP64)
>>>36       belong&0xffff00         &0x000100       V8+ Required,
>>>36       belong&0xffff00         &0x000200       Sun UltraSPARC1 Extensions Required,
>>>36       belong&0xffff00         &0x000400       HaL R1 Extensions Required,
>>>36       belong&0xffff00         &0x000800       Sun UltraSPARC3 Extensions Required,
>>20        belong                  0               {invalid}invalid version
>>20        belong                  1               version 1
>>36        belong                  1               MathCoPro/FPU/MAU Required
# Up to now only 0, 1 and 2 are defined; I've seen a file with 0x83, it seemed
# like proper ELF, but extracting the string had bad results.
>4          byte                    <0x80
>>8         byte                    !0
>>>8        string                  x               ("%s")
>8          byte                    0
>>7         byte                    0               (SYSV)
>>7         byte                    1               (HP-UX)
>>7         byte                    2               (NetBSD)
>>7         byte                    3               (GNU/Linux)
>>7         byte                    4               (GNU/Hurd)
>>7         byte                    5               (86Open)
>>7         byte                    6               (Solaris)
>>7         byte                    7               (Monterey)
>>7         byte                    8               (IRIX)
>>7         byte                    9               (FreeBSD)
>>7         byte                    10              (Tru64)
>>7         byte                    11              (Novell Modesto)
>>7         byte                    12              (OpenBSD)
>>7         byte                    97              (ARM)
>>7         ubyte                   255             (embedded)
